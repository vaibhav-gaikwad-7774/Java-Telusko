00:00:00 Core Java -->Due Date 
13:13:08 JUnit
16:04:39 DSA
21:11:50 Git
23:12:20 JDBC
24:33:04 Servlet and JSP 
30:29:58 Hibernate
33:49:37 Rest API  Web Service 
36:24:17 Spring Framework
37:46:54 Spring JDBC
38:16:19 Spring MVC 
39:41:39 Spring ORM Theory
40:12:45 Spring Data JPA
40:41:13 Rest API using Spring Boot
41:17:32 Project Using Spring Boot MVC
43:45:47 Java Spring Boot MongoDB Full Project
45:01:07 Spring AOP
45:21:59 Spring Security 
46:28:34 Microservice


Types of interface- 
normal
functional and marker

functional interface will havig only one interface
marker interface which having no any one interface


public class Demo {
    public static void main(String[] args) {

        A obj = () -> {
            System.out.println("In show");

        };

        obj.show();
    }
this function turn into the short form which is 

public class Demo {
    public static void main(String[] args) {

        A obj = () -> System.out.println("In show"); 
        
        this is called the
         labda functuin ithe aplyala short ak function asel tr
          tithe apluala curli bracket use krn need nhiye just in short evdch lihala trihi chalel


        obj.show();


        
    }



    Lambda example 1:

    @FunctionalInterface
interface A {
    void show(int i);

}

// class B implements A {
// public void show() {
// System.out.println("In show");
// }
// }

public class Demo {
    public static void main(String[] args) {

        A obj = i -> System.out.println("In show " + i);

        obj.show(4);
    }
}



labda 2 example

we take normal resular example without the lambda function which is :

@FunctionalInterface
interface A {
    int add(int a, int b);

}

public class Demo {
    public static void main(String[] args) {
        A obj = new A() {
            public int add(int i, int j) {
                return i + j;
            }
        };

        int result = obj.add(1, 4);
        System.out.println(result);

    }
} and we will convert it into the lambda function like the 


lambda function will only work with the functional interface
which is need to make look like these example vrti je examplehot 
tyacha short form kela ahe 

"@FunctionalInterface
interface A {
    int add(int a, int b);

}

public class Demo {
    public static void main(String[] args) {
        A obj = (i, j) -> i + j;

        int result = obj.add(1, 4);
        System.out.println(result);

    }
}"


Exceptions


error

compile time
runtime
and logical error


Compile time means some syntacal error which is used iin the code

runtime means exceptions and its called exceptions handling



logical error

try catch block usage 

"public class Demo {
    public static void main(String[] args) {

        int i = 4;
        int j = 0;

        try {

            j = 18 / i;

        } catch (Exception e) {
            System.out.println("its a system fault");
        }

        System.out.println(j);

        System.out.println("bye");

    }
}" 

yaat bs i think example ghetlay i la 4 ani j la 0 

nntr delcare kelay ki try block mdhe ki statement kontahi 
je critical and and try krychay apluala ani nntr
tyachya khali catch block if the try block execute nhi zala tr apan next
user laa pudhche opration kryla permission deto with certain message ki fault 
ahe pudhche msg or statement execute kr 

done -- 9.30


class vaibhavException extends Exception {
    public vaibhavException(String string) {

        System.out.println("this is my personal exception which i created ");
    }
}

public class throwKey {
    public static void main(String[] args) {

        int i = 0;
        int j = 0;

        try {
            j = 18 / i;
            if (j == 0)
                throw new vaibhavException("i dont want to print 0");
        }

        catch (ArithmeticException e) {
            j = 18 / 1;
            System.out.println("Thats the default value" + e);

        }

        catch (Exception e) {
            System.out.println("Something went wrong");
        }
        System.out.println(j);
        System.out.println("bye");

    }

}



throws exception:

class A {
    public void show() {
        try {
            Class.forName("Calc");
        } catch (ClassNotFoundException e) {
            System.out.println("Not able to find the class");
        }
    }
}

public class throwsKey {
    static {
        System.out.println("class Loaded");
    }

    public static void main(String[] args) {
        A obj = new A();
        obj.show();

    }

}


ducking the exception from one class to the another 
with the following code which is :

class A {
    public void show() throws ClassNotFoundException {

        Class.forName("Calc");
    }

}

public class throwsKey {
    static {
        System.out.println("class Loaded");
    }

    public static void main(String[] args) {
        A obj = new A();
        try {
            obj.show();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}


Throwskeyword use:


class A {
    public void show() throws ClassNotFoundException {

        Class.forName("Calc");
    }

}

public class throwsKey {
    static {
        System.out.println("class Loaded");
    }

    public static void main(String[] args) {
        A obj = new A();
        try {
            obj.show();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}



10. 3 Input from the User which is i think scanner:


>>>>>>> 9f4ac7c (20 Dec)



notes example

input from the user 



public class Input {
    public static void main(String[] args) {

    }
}

finding the ascii value of the any charatter which is present :

import java.io.IOException;

public class Input {
    public static void main(String[] args) throws IOException {
        System.out.println("Enter the Number");

        int num = System.in.read();

        System.out.println(num);

    }
}


when we take the input 0 it gives the 48 which is ascii value

using the buffe reader class which is present in the java class:


"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Input {
    public static void main(String[] args) throws IOException {
        System.out.println("Enter the Number");

        // int num = System.in.read();

        InputStreamReader in = new InputStreamReader(System.in);
        BufferedReader bf = new BufferedReader(in);

        int num = Integer.parseInt(bf.readLine());
        System.out.println(num);

    }
}



Scanner class which is more used in the tking input from the user which is basically apluala
aplyala jevha inut ghyaychay tevha use krychay"

"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class Input {
    public static void main(String[] args) throws IOException {
        System.out.println("Enter the Number");

        Scanner sc = new Scanner(System.in);
        int a1 = sc.nextInt();

        System.out.println(a1);

        // // int num = System.in.read();

        // InputStreamReader in = new InputStreamReader(System.in);
        // BufferedReader bf = new BufferedReader(in);

        // int num = Integer.parseInt(bf.readLine());
        // System.out.println(num);

        // bf.close();

    }
}
"



try with finally keyword :

its used to vsrify the finally keyword without the use of the catch block
the code is given bellow for understanding purpose:

import java.util.Scanner;

public class trywithFinally {
    public static void main(String[] args) {

        int num = 0;

        try {

            Scanner sc = new Scanner(System.in);
            System.out.println("Enter the Number which is you want to print: ");
            num = sc.nextInt();

            System.out.println(num);

        } finally

        {
          sc.close();

        }
    }
}


import java.util.Scanner;

public class trywithFinally {
    public static void main(String[] args) {

        int num = 0;

        try {

            Scanner sc = new Scanner(System.in);
            System.out.println("Enter the Number which is you want to print: ");
            num = sc.nextInt();

            System.out.println(num);

        } finally

        {
            // sc.close();

        }

    }
}


10.20 onwords dec 22

finnalyy used for clossing the resourcess:

try with resourcess which is used to declare the statement directly
like these code

"   try (Scanner sc = new Scanner(System.in);) {

            System.out.println("Enter the Number which is you want to print: ");
            num = sc.nextInt();

            System.out.println(num);

        } finally

        {
            // sc.close();

        }

    }
}"

threads in java:
dividing the task in to multiple threads which is used to doing



Threads will ve used like these which is defineltely like these :


"class A extends Thread {
    public void run() {
        for (int i = 1; i <= 100; i++) {
            System.out.println("Hi");
        }
    }
}

class B extends Thread {
    public void run() {
        for (int i = 1; i <= 100; i++) {
            System.out.println("hello");
        }
    }
}

public class Threads {
    public static void main(String[] args) {
        A obj1 = new A();
        B obj2 = new B();

        obj1.start();
        obj2.start();

    }

}
"

We can not decide to excecute the thread whic is scheduling 
we cant deside the things Thats
the threads will be the only suggest the things to the thread to escecute the thread one 
by one 


These is how we can set the priority which we cant decide:

    public static void main(String[] args) {
        A obj1 = new A();
        B obj2 = new B();

        System.out.println(obj1.getPriority());

        obj2.setPriority(Thread.MAX_PRIORITY);

        obj1.start();
        obj2.start();

    }

}
We can use the Thread.sleep which can use to print the statement
slowly as per excecute


"class A extends Thread {
    public void run() {
        for (int i = 1; i <= 100; i++) {
            System.out.println("Hi");
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}

class B extends Thread {
    public void run() {
        for (int i = 1; i <= 100; i++) {
            System.out.println("hello");
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}

public class Threads {
    public static void main(String[] args) {
        A obj1 = new A();
        B obj2 = new B();

        System.out.println(obj1.getPriority());

        obj2.setPriority(Thread.MAX_PRIORITY);

        obj1.start();
        obj2.start();

    }

}
"



"class A extends Thread {
    public void run() {
        for (int i = 1; i <= 100; i++) {
            System.out.println("Hi");
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}

class B extends Thread {
    public void run() {
        for (int i = 1; i <= 100; i++) {
            System.out.println("hello");
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
}

public class Threads {
    public static void main(String[] args) {
        A obj1 = new A();
        B obj2 = new B();

        System.out.println(obj1.getPriority());

        obj2.setPriority(Thread.MAX_PRIORITY);

        obj1.start();
        try {
            Thread.sleep(2);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        obj2.start();
        try {
            Thread.sleep(2);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();

        }

    }
}
"

Thread class Design the code like these :

"class z {

}

class A implements Runnable {
    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.println("Hi");
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

class B implements Runnable {
    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.println("hello");
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class Threads {
    public static void main(String[] args) {
        Runnable obj1 = new A();
        Runnable obj2 = new B();

        Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        t2.start();

    }

}
"


mutation:
you can change them in some how


Threadsafe:
only one thread can work with the same and only one thread will work


"class Counter {
    int count;

    public void increment() {
        count++;
    }
}

public class ThreadSafe {
    public static void main(String[] args) throws InterruptedException {

        Counter c = new Counter();

        Runnable obj1 = () -> { // applying lambda function which is used
            for (int i = 1; i <= 1000; i++) {

                c.increment();
            }
        };

        Runnable obj2 = () -> { // applying lambda function which is used
            for (int i = 1; i <= 1000; i++) {

                c.increment();
            }
        };

        Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        t2.start();

        t1.join();
        t2.join();

        System.out.println(c.count);

    }

}
" this is not thr good way its giving the variants of value which is 
present in the text


Synchronized keyword:

class Counter {
    int count;

    public synchronized void increment() {
        count++;
    }
}

public class ThreadSafe {
    public static void main(String[] args) throws InterruptedException {

        Counter c = new Counter();

        Runnable obj1 = () -> { // applying lambda function which is used
            for (int i = 1; i <= 1000; i++) {

                c.increment();
            }
        };

        Runnable obj2 = () -> { // applying lambda function which is used
            for (int i = 1; i <= 1000; i++) {

                c.increment();
            }
        };

        Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        t2.start();

        t1.join();
        t2.join();

        System.out.println(c.count);

    }

}


11.11 Collection 

collection API
collection
collections

Collection which implements list queue set
list: ArrayList, linkedlist

queue: Dequeue

set: hashSet, linkedHashset
 


 import java.util.ArrayList;
import java.util.Collection;

public class CollectionDemo {
    public static void main(String[] args) {
        Collection<Integer> nums = new ArrayList<Integer>();
        nums.add(6);
        nums.add(5);
        nums.add(7);
        nums.add(2);
        nums.add(1);

        for (int n : nums) {
            System.out.println(n);
        }

        // System.out.println(nums);

    }

}
 --6
5
7
2
1
[6, 5, 7, 2, 1]


when we declare a colledtion is need to declare the type of the Collection
which we are usiing to the proper 


"import java.util.ArrayList;
import java.util.Collection;

public class CollectionDemo {
    public static void main(String[] args) {
        Collection<Integer> nums = new ArrayList<Integer>();
        nums.add(6);
        nums.add(5);
        nums.add(7);
        nums.add(2);
        nums.add(1);

        for (int n : nums) {
            System.out.println(n);
        }

        // System.out.println(nums);

    }

}
"


##############

import java.util.ArrayList;
import java.util.List;

public class CollectionDemo {
    public static void main(String[] args) {
        List<Integer> nums = new ArrayList<Integer>();
        nums.add(6);
        nums.add(5);
        nums.add(7);
        nums.add(2);
        nums.add(1);

        System.out.println(nums.get(2));

        for (int n : nums) {
            int num = (Integer) n;
            System.out.println(num * 2);
        }

        // System.out.println(nums);

    }

}
#################


import java.util.ArrayList;
import java.util.List;

public class CollectionDemo {
    public static void main(String[] args) {
        List<Integer> nums = new ArrayList<Integer>();
        nums.add(6);
        nums.add(5);
        nums.add(7);
        nums.add(2);
        nums.add(1);

        System.out.println(nums.get(2));

        // for (int n : nums) {
        // int num = (Integer) n;
        // System.out.println(num * 2);
        // }

        // System.out.println(nums);

    }

}
##########


List:


import java.util.ArrayList;
import java.util.List;

public class CollectionDemo {
    public static void main(String[] args) {
        List<Integer> nums = new ArrayList<Integer>();
        nums.add(6);
        nums.add(5);
        nums.add(7);
        nums.add(2);
        nums.add(1);
        nums.add(6);

        // System.out.println(nums.get(2));

        for (int n : nums) {
            int num = (Integer) n;
            System.out.println(num * 2);
        }

        // System.out.println(nums);

    }

}
######


hashset makes the sorted unrepeted numbers which is want to be print

treeset which help to  make sorted value:

 public static void main(String[] args) {
        Set<Integer> nums = new TreeSet<Integer>();
        nums.add(6);
        nums.add(5);
        nums.add(7);
        nums.add(2);
        nums.add(1);
        nums.add(6);

        // System.out.println(nums.get(2));

        for (int n : nums) {
            // int num = (Integer) n;
            System.out.println(n);
        }

        // System.out.println(nums);

    }

}

####
ximport java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class CollectionDemo {
    public static void main(String[] args) {
        Set<Integer> nums = new TreeSet<Integer>();
        nums.add(6);
        nums.add(5);
        nums.add(7);
        nums.add(2);
        nums.add(1);
        nums.add(6);

        Iterator<Integer> Values = nums.iterator();

        while (Values.hasNext()) {
            System.out.println(Values.next());
        }

        // System.out.println(nums.get(2));

        // for (int n : nums) {
        // // int num = (Integer) n;
        // System.out.println(n);
        // }

        // System.out.println(nums);

    }

}
###
Thats how the treeset and hashset used in the collection


Map ussage in collection:


"import java.util.HashMap;
import java.util.Map;

public class MapDemo {
    public static void main(String[] args) {
        Map<String, Integer> Students = new HashMap<>();

        Students.put("navin", 34);
        Students.put("harsh", 22);
        Students.put("sushil", 33);
        Students.put("kiran", 44);
        Students.put("vaibhv", 55);
        Students.put("harsh", 99);

        System.out.println(Students);
    }

}
"

11.52 Sorting Topic

Sorting can be done using your own logic also we can define the process of the 
sorting as per our need 

Sorting
 and the example of the we can define the Array list and 
 with the help of the last digit and logic we can sort the array like the bellow
 "import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Sorting {
    public static void main(String[] args) {

        Comparator <Integer> com = new Comparator<Integer>() {
            public int compare(Integer i, Integer j){
                if (i%10 > j%10) {
                    return 1;
                }
                else {
                    return -1;
                }

            }
        };


        List<Integer> nums =  new ArrayList<>();
        nums.add(33);
        nums.add(51);
        nums.add(28);
        nums.add(11);
        nums.add(78);

        Collections.sort(nums, com);
        System.out.println(nums);


        
    }
    
}
" 


Sorting the valus:
"import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Student {
    int age;
    String name;

    
    public Student(int age, String name) {
        this.age = age;
        this.name = name;
    }


    @Override
    public String toString() {
        return "Student [age=" + age + ", name=" + name + "]";
    }

    
}



public class Sorting {
    public static void main(String[] args) {

        Comparator <Integer> com = new Comparator<Integer>() {
            public int compare(Integer i, Integer j){
                if (i%10 > j%10) {
                    return 1;
                }
                else {
                    return -1;
                }

            }
        };


        List<Student> nums =  new ArrayList<>();
        nums.add(new Student(21, "Vaibhav"));
        nums.add(new Student(23, "ankur"));
        nums.add(new Student(54, "gita"));
        nums.add(new Student(77, "pradnya"));
        nums.add(new Student(88, "sakshi"));

        // Collections.sort(nums, com);
        System.out.println(nums);


        
    }
    
}
"


12. comparable :


"import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Student {
    int age;
    String name;

    public Student(int age, String name) {
        this.age = age;
        this.name = name;
    }

    @Override
    public String toString() {
        return "Student [age=" + age + ", name=" + name + "]";
    }
}

public int compareTo(Student that){
    if(this.age> that.age){
        return 1;
        
    }
    else{
        return -1;
    }
}

public class Sorting {
    public static void main(String[] args) {

        // Comparator to sort Students by age
        Comparator<Student> com = new Comparator<Student>() {
            public int compare(Student i, Student j) {
                return Integer.compare(i.age, j.age); // Simplified comparison
            }
        };

        List<Student> students = new ArrayList<>();
        students.add(new Student(21, "Vaibhav"));
        students.add(new Student(23, "Ankur"));
        students.add(new Student(54, "Gita"));
        students.add(new Student(77, "Pradnya"));
        students.add(new Student(88, "Sakshi"));

        // Sorting using custom comparator
        Collections.sort(students, com);

        // Printing the sorted list
        for (Student s : students) {
            System.out.println(s);
        }
    }
}
"

12.02 - SteamAPI


import java.util.Arrays;
import java.util.List;

public class SteamAPI {
    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(2, 3, 4, 5);

    }

}
 in thesse the declaration of the numbers will declare in the same line


it will give the normal for loop and the usage of the 
steam method:which is :


"import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class SteamAPI {
    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(2, 3, 4, 5);

        // for (int i = 0; i < nums.size(); i++) {
        // System.out.println(i);
        // }

        for (int n : nums) {
            System.out.println(n);
        }

        // int sum = 0;
        // for (int n : nums) {

        // if (n % 2 == 0) {
        // n = n * 2;
        // sum = sum + n;
        // }
        // }

        // System.out.println(sum);
    }

}
"


it wills shorten the method like these:

"      nums.forEach(n -> System.out.println(n));"


forEach usage:

"import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

public class SteamAPI {
    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(2, 3, 4, 5);

        Consumer<Integer> con = new Consumer<Integer>() {
            public void accept(Integer n) {

                System.out.println(n);
            }
        };

        nums.forEach(con);

        // for (int i = 0; i < nums.size(); i++) {
        // System.out.println(i);
        // }

        // for (int n : nums) {
        // System.out.println(n);
        // }

        // nums.forEach(n -> System.out.println(n));

        // int sum = 0;
        // for (int n : nums) {

        // if (n % 2 == 0) {
        // n = n * 2;
        // sum = sum + n;
        // }
        // }

        // System.out.println(sum);
    }

}
"
Stream API keyword usage :

"import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;

public class SteamAPI {
    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(2, 3, 4, 5);

        // Consumer<Integer> con = n -> System.out.println(n);

        nums.forEach(n -> System.out.println(n));

        // for (int i = 0; i < nums.size(); i++) {
        // System.out.println(i);
        // }

        // for (int n : nums) {
        // System.out.println(n);
        // }

        // nums.forEach(n -> System.out.println(n));

        // int sum = 0;
        // for (int n : nums) {

        // if (n % 2 == 0) {
        // n = n * 2;
        // sum = sum + n;
        // }
        // }

        // System.out.println(sum);
    }

}
"


12.15 --> 

"import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class SteamAPI {
    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(2, 3, 4, 5);

        // Consumer<Integer> con = n -> System.out.println(n);

        Stream<Integer> s1 = nums.stream();

        s1.forEach(n -> System.out.println(n));

        // for (int i = 0; i < nums.size(); i++) {
        // System.out.println(i);
        // }

        // for (int n : nums) {
        // System.out.println(n);
        // }

        // nums.forEach(n -> System.out.println(n));

        // int sum = 0;
        // for (int n : nums) {

        // if (n % 2 == 0) {
        // n = n * 2;
        // sum = sum + n;
        // }
        // }

        // System.out.println(sum);
    }

}
"

stream can not been used when one time used

Short form of the Stream API using in the Code like the bellow:


#######
   int result = nums.stream()
                .filter(n -> n % 2 == 0)
                .map(n -> n * 2)
                .reduce(0, (c, e) -> c + e);

        System.out.println(result);

#########

new method to write the method in short these way:

 Predicate<Integer> p = n -> n % 2 == 0;


 usage of the .map function in short which are written in the following way:

  Function<Integer, Integer> fun = new Function<Integer, Integer>() {
            public Integer apply(Integer n) {
                return n * 2;
            }

        };

        int result = nums.stream()
                // .filter(p)
                .map(fun)
                .reduce(0, (c, e) -> c + e);

        System.out.println(result);



        Tjese\


These will convert the function to :

"Function<Integer, Integer> fun = new Function<Integer, Integer>() {
        public Integer apply(Integer n) {
        return n * 2;
        }

        };"these to lambda function like these :

        "Function<Integer, Integer> fun = n -> n * 2;"


"import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Stream;

// import com.apple.eawt.event.FullScreenEvent;

public class SteamAPI {
    public static void main(String[] args) {

        List<Integer> nums = Arrays.asList(2, 3, 4, 5);

        // Create a new stream for each operation
        // Stream<Integer> s1 = nums.stream();
        // // s1.forEach(n -> System.out.println("Stream s1: " + n));

        // // Create a new stream for filtering
        // Stream<Integer> s2 = nums.stream().filter(n -> n % 2 == 0);
        // // s2.forEach(n -> System.out.println("Filtered Stream s2: " + n));

        // Stream<Integer> s3 = s2.map(n -> n * 2);

        // int result = s3.reduce(0, (c, e) -> c + e);

        // Predicate<Integer> p = n -> n % 2 == 0; // filter function

        // Function<Integer, Integer> fun = new Function<Integer, Integer>() {
        // public Integer apply(Integer n) {
        // return n * 2;
        // }

        // };

        // Function<Integer, Integer> fun = n -> n * 2;

        int result = nums.stream()
                // .filter(p)
                .map(n -> n * 2) // that whic we already defined and declared
                .reduce(0, (c, e) -> c + e);

        System.out.println(result);

        // s3.forEach(n -> System.out.println(n));

        // List<Integer> nums = Arrays.asList(2, 3, 4, 5);

        // // Consumer<Integer> con = n -> System.out.println(n);

        // Stream<Integer> s1 = nums.stream();
        // Stream<Integer> s2 = s1.filter(n -> n % 2 == 0);

        // s1.forEach(n -> System.out.println(n));

        // s1.forEach(n -> System.out.println(n));

        // for (int i = 0; i < nums.size(); i++) {
        // System.out.println(i);
        // }

        // for (int n : nums) {
        // System.out.println(n);
        // }

        // nums.forEach(n -> System.out.println(n));

        // int sum = 0;
        // for (int n : nums) {

        // if (n % 2 == 0) {
        // n = n * 2;
        // sum = sum + n;
        // }
        // }

        // System.out.println(sum);
    }

}
"

12.31

java 21 updates

void main{
    System.out.println("hellow world")
}


LVTI
local variants type interface

"public class LVTI {
    // var num = 10;
    // var keywrd cant used as a class name

    public static void main(String[] args) {
        int a = 9;
        var b = 8;
        // System.out.println(num);
        String var = "Vaibhav";

        int c;
        // var d; // when we intialize the any variable with the
        // var type we need to definitely assign the value of the
        // integer in the following array type

        int nums[] = new int[10];

        var nums1 = new int[10]; // is allowed

        var obj = new Alien();
    }

}

"
12.48

Seales classes:
"sealed class A permits B, C {

}

final class B extends A {

}

final class C extends A {

}

class D {

}

public class SealedClass {
    public static void main(String[] args) {

    }

}
"
when we declare krto na class sealed tevha aplyala jr ti class selaed krychi asel
tr till keyword use krycha start la ani jya class la dyaychay na fkt 
tya class cha name Sealed class A  permits A,B{
    asa yenar
}
anu class B and c mdhe aplyala te proper mention krava lagel
either selaed non selaed and otherwise the final class krun proper like
final class B extends A{

}  same ashich c chi class asnare like :

final class C extends A {

}

function is used to design the proper classes 
these 

New Sealed class Example:
sealed class A extends Thread implements Cloneable permits B, C {
    // Class A logic
}

non-sealed class B extends A {
    // Class B logic
}

final class C extends A {
    // Class C logic
}

// Class D extends non-sealed class B, so further subclassing is allowed
class D extends B {
    // Class D logic
}

// Sealed interface example
sealed interface X permits Y {
    // Interface X logic
}

final class Y implements X {
    // Class Y logic
}

public class SealedClass {
    public static void main(String[] args) {
        // Example usage of the classes
        A a = new B();
        A c = new C();
        B b = new D();

        System.out.println("Sealed class example executed.");
    }
}


Records class: 12.57

THE LONG code will be converted into the following code which is :

public record Alien1(int id, String name) {


    example like these : 

    // public record Alien1(int id, String name) {
// }

public class Project {
    public static void main(String[] args) {
        Alien1 a1 = new Alien1(1, "Vaibhav");
        Alien1 a2 = new Alien1(1, "Vaibhav");

        System.out.println(a1); // Alien1[id=1, name=Vaibhav]
        System.out.println(a2); // Alien1[id=1, name=Vaibhav]

        // Testing equality
        System.out.println("a1 equals a2: " + a1.equals(a2)); // true
    }




}


shorter example of the code whic is :

package mypackage;

public record Student(int rollNo, String name) {
}

public class Project {
    public static void main(String[] args) {
        mypackage.Student s1 = new mypackage.Student(101, "Alice");
        mypackage.Student s2 = new mypackage.Student(101, "Alice");

        System.out.println(s1); // Student[rollNo=101, name=Alice]
        System.out.println(s2); // Student[rollNo=101, name=Alice]
        System.out.println("s1 equals s2: " + s1.equals(s2)); // true
    }
}
