00:00:00 Core Java -->Due Date 
13:13:08 JUnit
16:04:39 DSA
21:11:50 Git
23:12:20 JDBC
24:33:04 Servlet and JSP 
30:29:58 Hibernate
33:49:37 Rest API  Web Service 
36:24:17 Spring Framework
37:46:54 Spring JDBC
38:16:19 Spring MVC 
39:41:39 Spring ORM Theory
40:12:45 Spring Data JPA
40:41:13 Rest API using Spring Boot
41:17:32 Project Using Spring Boot MVC
43:45:47 Java Spring Boot MongoDB Full Project
45:01:07 Spring AOP
45:21:59 Spring Security 
46:28:34 Microservice


Types of interface- 
normal
functional and marker

functional interface will havig only one interface
marker interface which having no any one interface


public class Demo {
    public static void main(String[] args) {

        A obj = () -> {
            System.out.println("In show");

        };

        obj.show();
    }
this function turn into the short form which is 

public class Demo {
    public static void main(String[] args) {

        A obj = () -> System.out.println("In show"); 
        
        this is called the
         labda functuin ithe aplyala short ak function asel tr
          tithe apluala curli bracket use krn need nhiye just in short evdch lihala trihi chalel


        obj.show();


        
    }



    Lambda example 1:

    @FunctionalInterface
interface A {
    void show(int i);

}

// class B implements A {
// public void show() {
// System.out.println("In show");
// }
// }

public class Demo {
    public static void main(String[] args) {

        A obj = i -> System.out.println("In show " + i);

        obj.show(4);
    }
}



labda 2 example

we take normal resular example without the lambda function which is :

@FunctionalInterface
interface A {
    int add(int a, int b);

}

public class Demo {
    public static void main(String[] args) {
        A obj = new A() {
            public int add(int i, int j) {
                return i + j;
            }
        };

        int result = obj.add(1, 4);
        System.out.println(result);

    }
} and we will convert it into the lambda function like the 


lambda function will only work with the functional interface
which is need to make look like these example vrti je examplehot 
tyacha short form kela ahe 

"@FunctionalInterface
interface A {
    int add(int a, int b);

}

public class Demo {
    public static void main(String[] args) {
        A obj = (i, j) -> i + j;

        int result = obj.add(1, 4);
        System.out.println(result);

    }
}"


Exceptions


error

compile time
runtime
and logical error


Compile time means some syntacal error which is used iin the code

runtime means exceptions and its called exceptions handling



logical error

try catch block usage 

"public class Demo {
    public static void main(String[] args) {

        int i = 4;
        int j = 0;

        try {

            j = 18 / i;

        } catch (Exception e) {
            System.out.println("its a system fault");
        }

        System.out.println(j);

        System.out.println("bye");

    }
}" 

yaat bs i think example ghetlay i la 4 ani j la 0 

nntr delcare kelay ki try block mdhe ki statement kontahi 
je critical and and try krychay apluala ani nntr
tyachya khali catch block if the try block execute nhi zala tr apan next
user laa pudhche opration kryla permission deto with certain message ki fault 
ahe pudhche msg or statement execute kr 

done -- 9.30


class vaibhavException extends Exception {
    public vaibhavException(String string) {

        System.out.println("this is my personal exception which i created ");
    }
}

public class throwKey {
    public static void main(String[] args) {

        int i = 0;
        int j = 0;

        try {
            j = 18 / i;
            if (j == 0)
                throw new vaibhavException("i dont want to print 0");
        }

        catch (ArithmeticException e) {
            j = 18 / 1;
            System.out.println("Thats the default value" + e);

        }

        catch (Exception e) {
            System.out.println("Something went wrong");
        }
        System.out.println(j);
        System.out.println("bye");

    }

}



throws exception:

class A {
    public void show() {
        try {
            Class.forName("Calc");
        } catch (ClassNotFoundException e) {
            System.out.println("Not able to find the class");
        }
    }
}

public class throwsKey {
    static {
        System.out.println("class Loaded");
    }

    public static void main(String[] args) {
        A obj = new A();
        obj.show();

    }

}


ducking the exception from one class to the another 
with the following code which is :

class A {
    public void show() throws ClassNotFoundException {

        Class.forName("Calc");
    }

}

public class throwsKey {
    static {
        System.out.println("class Loaded");
    }

    public static void main(String[] args) {
        A obj = new A();
        try {
            obj.show();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}


Throwskeyword use:


class A {
    public void show() throws ClassNotFoundException {

        Class.forName("Calc");
    }

}

public class throwsKey {
    static {
        System.out.println("class Loaded");
    }

    public static void main(String[] args) {
        A obj = new A();
        try {
            obj.show();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}



10. 3 Input from the User which is i think scanner:


>>>>>>> 9f4ac7c (20 Dec)



notes example

input from the user 



public class Input {
    public static void main(String[] args) {

    }
}

finding the ascii value of the any charatter which is present :

import java.io.IOException;

public class Input {
    public static void main(String[] args) throws IOException {
        System.out.println("Enter the Number");

        int num = System.in.read();

        System.out.println(num);

    }
}


when we take the input 0 it gives the 48 which is ascii value

using the buffe reader class which is present in the java class:


"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Input {
    public static void main(String[] args) throws IOException {
        System.out.println("Enter the Number");

        // int num = System.in.read();

        InputStreamReader in = new InputStreamReader(System.in);
        BufferedReader bf = new BufferedReader(in);

        int num = Integer.parseInt(bf.readLine());
        System.out.println(num);

    }
}



Scanner class which is more used in the tking input from the user which is basically apluala
aplyala jevha inut ghyaychay tevha use krychay"

"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class Input {
    public static void main(String[] args) throws IOException {
        System.out.println("Enter the Number");

        Scanner sc = new Scanner(System.in);
        int a1 = sc.nextInt();

        System.out.println(a1);

        // // int num = System.in.read();

        // InputStreamReader in = new InputStreamReader(System.in);
        // BufferedReader bf = new BufferedReader(in);

        // int num = Integer.parseInt(bf.readLine());
        // System.out.println(num);

        // bf.close();

    }
}
"



try with finally keyword :

its used to vsrify the finally keyword without the use of the catch block
the code is given bellow for understanding purpose:

import java.util.Scanner;

public class trywithFinally {
    public static void main(String[] args) {

        int num = 0;

        try {

            Scanner sc = new Scanner(System.in);
            System.out.println("Enter the Number which is you want to print: ");
            num = sc.nextInt();

            System.out.println(num);

        } finally

        {
          sc.close();

        }
    }
}


import java.util.Scanner;

public class trywithFinally {
    public static void main(String[] args) {

        int num = 0;

        try {

            Scanner sc = new Scanner(System.in);
            System.out.println("Enter the Number which is you want to print: ");
            num = sc.nextInt();

            System.out.println(num);

        } finally

        {
            // sc.close();

        }

    }
}


10.20 onwords dec 22
