Notes of DataStructure which is help to recall the function:

16.5:

primitive data type:
how to save the data and save the memory and managing the data with more dynamicn ways

algo is set of instruction
the Raw action whichh is easily understand the user to what to do is the pseudo code
like the bello :

input a
input b
sum a+b
output sum

its imp to make fast process to do the certain operation in the bellow 

the speed of Any application will be increased by the DataStructure

We have types of DataStructure
list
linkedlist
array 
set
tree 
graph

16.12:
ADT(Abstract data type)

data is used for the 
data collection
data processing
data output
data storage

Concept and Datatype which is used to define the DataStructure
which is called thw abstract data type 


16:19
Arrays:qaa



With the help of the ADT we can do the Different
operation which is really usefull for the data managing 
on array

like finding the number of address:
searchig of elements:
inserting num
deleting 
 

 time taken for any operation which having to do the 
 array:
 Time complaxity will define the code effieciency

Time complaxity:

algo analysis:
space and time complaxity play imp role in the code

searchig elements in a sorted array having the 
two mainly method which is :

linear search and
binary search


Linear Search:

5 7 9 12 17 

target us 12 then we can compare the Each elements
 
when we finding the 1 elememts is easy but havingthe 4th element is
is little bit tricky we have to check the Each Elemenmt with the starting and upto the Ending 


Linear Search pseudo algorithm which is like the follow:

linear Search (A: list of Items, Target: the Item which we are searching)

firstly find the lengh of the A and Store it in a variable
like these n = lenght of a

then with using the if condition we can search the element untill
find target of Elemenmt like these
if A[i] equals target then
return i //return the Index for the Elemement which is found
and if
element is not found then end the procedure
end statement and print the Element is not Found:

like these 
end for return -1 //if the targeted Element is not found in the Arrays
end procedure

16.33

binary Search:

lets having array

pseuso code for the Binary search tree:

BST(A:list of Sorted Item, Target : which is we searching for)
left = 0;
right = lenght(A)-1

while left <= right
 mid = (left + right)/2
 ifA [mid] equals to target then
 return mid // return the index where the element is present at the array
 else if A[mid] < target then
 left = mid + 1// continue the search to the right side of the array
 else
 right = mid -1 // continue to search at the left side of the Arrays
 end if
 end while

 return -1 //if the target element is not equals to the list
























binary search: 
16:35


time complaxity:
big O notation:
O(1) constant time
log n

16.47

practicle implementation 

Binary Search:

linear search with the O(n)
Binary search with the O(log n)



here is the Linear Search algo works

package DSA;

public class LinearSearchTest {
    public static void main(String[] args) {
        int nums[] = { 1, 3, 4, 5, 6 };
        int target = 6;

        int result = linearSearch(nums, target);

        if (result != -1){
            System.out.println("Element found at index : "+ result);
        }else{
            System.out.println("Element is not found");
        }

            }
        
            public static int linearSearch(int[] nums, int target) {
                for(int i = 0; i<nums.length; i++){
                    if(nums[i] == target)
                    return i;
                }            
                
                return -1;
                
                
            }
}
        
17 : 07 
Sorting Techniques:

Sorting:

Bubble sort:

package DSA;

public class BubbleSortDemo {
    public static void main(String[] args) {
        int nums[] = { 1, 2, 3, 2, 1, 4, 5, 3, 6, 7, 8, 9, 5, 44, 4, 5, 6, 7, };
        int size = nums.length;
        int temp = 0;

        System.out.println("Before Sorting");
        for (int num : nums) {
            System.out.print(num + " ");
        }

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size - 1; j++) {
                if (nums[j] > nums[j + 1]) {
                    temp = nums[j];
                    nums[j] = nums[j + 1];
                    nums[j + 1] = temp;
                }
            }

        }

        System.out.println();
        System.out.println("after Sorting");
        for (int num : nums) {
            System.out.print(num + " ");
        }

    }
}

package DSA;

import java.util.Scanner;

public class BubbleSortScan {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the Element which is you want to print : ");
        int size = sc.nextInt();

        int nums[] = new int[size];

        System.out.println("Enter the Element of the Array: ");
        for (int i = 0; i < size; i++) {
            nums[i] = sc.nextInt();
        }

        System.out.println("Before Sorting: ");
        for (int num : nums) {
            System.out.print(num + " ");

        }

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size - i - 1; j++) {
                if (nums[j] > nums[j + 1]) {
                    int temp = nums[j];
                    nums[j] = nums[j + 1];
                    nums[j + 1] = temp;

                }
            }

        }

        System.out.println("\n After Sorting: ");
        for (int num : nums) {
            System.out.print(num + " ");
        }
        sc.close();

    }

}
Selection Sorting :
 sorting in dependance to the greater vale over array
Selecton sorting which is Depends on the Bellow:

"package DSA;

public class SelectionSort {
    public static void main(String[] args) {
        int nums[] = {3,7,3,1,5,7,8};
        int size = nums.length;
        int temp = 0;
        int minIndex = -1;

        System.out.println("Before Sorting");
        for (int num : nums) {
            System.out.print(num + " ");
        }

        for(int i = 0; i<size-1; i++){
            minIndex  = i;
            for (int j = i; j<size; j++){
                if(nums[minIndex]>nums[j]){
                    minIndex = j;
                }
            }
            temp = nums[minIndex];
             nums[minIndex]= nums[i];
             nums[i] = temp ;
             }

        
        

        System.out.println();
        System.out.println("after Sorting");
        for (int num : nums) {
            System.out.print(num + " ");
        }

        

    }
}" Selection sort Example:


insertion sort:

shifting depends on the Value Greaater than 
and start comparing with the last:


we want the Variables which is i, j,key
arr{5,6,7,3,6,8}
while(){

}

//17.49

insertion sorting :

"public class InsertionSort {
    public static void main(String[] args) {
        int[] nums = {5, 3, 8, 6, 2};

        System.out.println("Before Sorting:");
        for (int num : nums) {
            System.out.print(num + " ");
        }

        // Insertion Sort
        for (int i = 1; i < nums.length; i++) {
            int key = nums[i]; // Current element to be sorted
            int j = i - 1;

            // Shift elements of sorted portion to make space for key
            while (j >= 0 && nums[j] > key) {
                nums[j + 1] = nums[j];
                j--;
            }

            // Insert key at its correct position
            nums[j + 1] = key;
        }

        System.out.println("\nAfter Sorting:");
        for (int num : nums) {
            System.out.print(num + " ");
        }
    }
}
"

17.57:
Quick Sort algo:

O(nlog(n))


1. divide and conquer
recursions
2. pivit its a central element which is in the array
3. creating the Treee liike a structure:

make a tree like structure with using the 

pivit:
 partition of the array 
 whichis having the right position





